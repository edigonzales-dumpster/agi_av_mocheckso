buildscript {
    repositories {
        maven { url "https://repo.osgeo.org/repository/release/" }
        maven { url "http://jars.interlis.ch" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "ch.so.agi:gretl:2.0.227"
    }
}

apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.util.TaskUtil
import java.nio.file.Paths
import java.nio.file.Files
import java.io.FileOutputStream
import org.apache.commons.net.ftp.*

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def localFileName = "mocheckso_errors.csv"

def server = ftpServerInfogrips
def systemTypeKey = "WINDOWS" 
def user = ftpUserInfogrips
def password = ftpPwdInfogrips
def remoteFileName = "\\DM01AVSO24LV95\\ERROR\\MOCHECKSO_ERRORS.CSV"

task downloadCsv() {
    doLast {
        def ftp = new FTPClient()

        try {            
            ftp.connect(server, 21)
            ftp.login(user, password)
            ftp.configure(new FTPClientConfig(systemTypeKey)); 

            int reply = ftp.getReplyCode();
            if(!FTPReply.isPositiveCompletion(reply)) {
                throw new Exception("FTP server refused connection.")
            }

            String fileName = Paths.get(pathToTempFolder, localFileName).toFile().getAbsoluteFile()
            FileOutputStream fos = new FileOutputStream(fileName)

            boolean response = ftp.retrieveFile(remoteFileName, fos)
            if (response == false) {
                throw new Exception("Could not retrieve file: " + remoteFileNameFile)
            }
            println "File downloaded: " + fileName
        } catch (Exception e) {
            GradleException ge = TaskUtil.toGradleException(e)
            throw ge
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect()
                } catch(IOException e) {
                    // do nothing
                }
            }
        }

        // TODO: In Rote Faden Doku!!!!
        // Achtung: Das gesamte File wird in den Memory gelesen.
        def fileContent = new File(pathToTempFolder.toString()+"/mocheckso_errors.csv").getText('windows-1252')
        new File(pathToTempFolder.toString()+"/mocheckso_errors_semicolon.csv").write(fileContent.replace("\t",";"),'utf-8')

    }
}

task validateCsv(type: CsvValidator, dependsOn: 'downloadCsv') {
    models = "SO_AGI_MOCheckSO_20200715"
    modeldir = "./model;http://models.geo.admin.ch"
    firstLineIsHeader = true
    valueDelimiter = null
    valueSeparator = ';'
    encoding = "UTF-8"
    dataFiles = [pathToTempFolder.toString()+"/mocheckso_errors_semicolon.csv"]
}

